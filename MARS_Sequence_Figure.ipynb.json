{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "In this R Markdown document, we will align pimer sequences of metabarcode datasets to a 16S ssu rRNA reference (in this case, we chose E. Coli sequence NR_114042.1), in order to plot the coverage of that dataset on the 16S gene, compared to the number of sequences in that dataset.\n",
    "\n",
    "note: if the R-markdown doesn't run locally, try installing TinyTeX via:  tinytex::install_tinytex()\n",
    "\n",
    "### Initiation\n",
    "\n",
    "To start, initiate and create the working environment by loading the required packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in library(Biostrings): there is no package called ‘Biostrings’\n",
     "output_type": "error",
     "traceback": [
      "Error in library(Biostrings): there is no package called ‘Biostrings’\nTraceback:\n",
      "1. library(Biostrings)",
      "2. stop(txt, domain = NA)"
     ]
    }
   ],
   "source": [
    "library(Biostrings)\n",
    "library(seqinr)\n",
    "library(seqRFLP)\n",
    "library(stringr)\n",
    "library(ggplot2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read in the data and the E.Coli reference sequence \n",
    "In this step, the data is imported. Metadata of everey dataset on mARS is stored as a MiMARKS or MIxS table together with a corresponding SeqSet table. Here, all these data have been brought together into one file (version 11Jun2019). Next, the reference sequence will be read from a fasta file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataOut <- read.csv('mARS_MetaData_V_11Jun2019.csv', header=TRUE, row.names=1)\n",
    "\n",
    "RefSeq <- read.fasta(file='eColiRef.fasta')\n",
    "\n",
    "# make sure all bases in the sequence are in capitals\n",
    "RefSeq <- c(toupper(paste(unlist(RefSeq)[[2]], sep='', collapse = '')))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting the primer sequences \n",
    "\n",
    "Next, we need to get the primer sequences of the datasets that targeted the 16S gene with a metabarcoding technique. \n",
    "\n",
    "For this, a custom function (split_DNAstringList_unknownSep) was created to deal with different notation variants of the primers. The function takes a string composed of short DNA sequences, and tries to split them based on a separator that it can recognize. This function is declared first. A second function that we will declare needs to take care of finding where the primer sequence aligns to the reference sequence. This function will take a primer and reference, and will return the starting (if start=TRUE) or end (start=FALSE) position. We will call this function primerPosition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "split_DNAstringList_unknownSep<-function(DNAstringList_unknownSep){\n",
    "  #takes at string composed of DNA sequences with unkown separator\n",
    " \n",
    "  #trim trailing white spaces\n",
    "  DNAstringList_unknownSep<-StrTrim(DNAstringList_unknownSep, pattern = \" \\t\\n\", method = \"both\")\n",
    "  \n",
    "  #assume space as default sep\n",
    "  if(grepl(\",\", DNAstringList_unknownSep, fixed=TRUE)){\n",
    "    DNAstringList_unknownSep<-gsub(\" \", \"\", DNAstringList_unknownSep, fixed = TRUE)\n",
    "    DNAstringList_unknownSep<-strsplit(DNAstringList_unknownSep, ',')[[1]]\n",
    "  } else if(grepl(\";\", DNAstringList_unknownSep, fixed=TRUE)){\n",
    "    DNAstringList_unknownSep<-gsub(\" \", \"\", DNAstringList_unknownSep, fixed = TRUE)\n",
    "    DNAstringList_unknownSep<-strsplit(DNAstringList_unknownSep, ';')[[1]]\n",
    "  } else if(grepl(\"|\", DNAstringList_unknownSep, fixed=TRUE)){\n",
    "    DNAstringList_unknownSep<-gsub(\" \", \"\", DNAstringList_unknownSep, fixed = TRUE)\n",
    "    DNAstringList_unknownSep<-strsplit(DNAstringList_unknownSep, '|')[[1]]\n",
    "  } else{\n",
    "    DNAstringList_unknownSep<-strsplit(DNAstringList_unknownSep, ' ')[[1]]\n",
    "  }\n",
    "  \n",
    "  return(DNAstringList_unknownSep)\n",
    "}\n",
    "\n",
    "primerPosition<-function(primer, reference, start=TRUE){\n",
    "  ### function that takes a primer and a reference\n",
    "  ### returns the starting (start=TRUE) or ending (start=FALSE) position \n",
    "  mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = FALSE)\n",
    "  \n",
    "  locAlign <- tryCatch({pairwiseAlignment(pattern=toupper(primer), subject=reference, type= \"local\", \n",
    "                                          substitutionMatrix = mat, gapOpening = 8, \n",
    "                                          gapExtension = 4)}, \n",
    "                       error = function(e){print('error')})\n",
    "  \n",
    "  if(start==TRUE){\n",
    "    return(locAlign@subject@range@start)\n",
    "  } else{\n",
    "    return(locAlign@subject@range@start+nchar(primer))\n",
    "  }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data that we need to generate the figure will be stored in a new dataframe, called figData, containing 3 columns: seqstart (forward primer starting position on the reference sequence), seqend (reverse primer end position on the reference sequence), reads (the number of reads on SRA) and dataset (the name of the dataset from which a sample comes). Each row will represent a sample from a dataset.\n",
    "If the number of reads is not specified (e.g. in the case of Sanger sequencing), we will assume 10 reads for illustrative purposes. If different primers have been submitted that target different parts of the 16S gene, than (for now) only the first primer will be considered to avoid overcomplicating the way the datasets can be represented on the figure. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "require(DescTools)\n",
    "figData<-data.frame(seqstart=NA, seqend=NA, reads=NA, dataset=NA)\n",
    "lineX=1\n",
    "for(line in 1:nrow(dataOut)){\n",
    "  # only select data that has been registered as targeting the 16S gene\n",
    "  if(dataOut[line,]$marker %in% c(\"16S\", \"16S ssu rRNA\", \"16S rRNA\")){\n",
    "    fprimerlist<-(dataOut[line,]$primerSequenceForward)\n",
    "    rprimerlist<-(dataOut[line,]$primerSequenceReverse)\n",
    "    reads <- dataOut[line,]$lib_reads_seqd\n",
    "    datasetName <- dataOut[line,]$datasetName\n",
    "    if(reads==\"\"|is.na(reads)){\n",
    "      #If the number of reads is not specified (e.g. in the case of Sanger sequencing), we will assume 10 reads for illustrative purposes.\n",
    "      reads<-10\n",
    "    }\n",
    "    start_ref <- 1\n",
    "    end_ref <- nchar(RefSeq)\n",
    "    \n",
    "    if(!fprimerlist==\"\"){\n",
    "      fprimerlist<-split_DNAstringList_unknownSep(fprimerlist)\n",
    "      \n",
    "      if(length(fprimerlist) > 1){\n",
    "        startlist<-c()\n",
    "        for(fprimer in fprimerlist){\n",
    "          startpos<-primerPosition(fprimer, RefSeq, start=TRUE)\n",
    "          startlist<-c(startlist, startpos)\n",
    "        }\n",
    "        if(max(startlist)-min(startlist)>10){\n",
    "          #treat as different primers\n",
    "          ###print(\"different primers have been found, you might need to work this part out\")\n",
    "          startpos<-min(startlist)\n",
    "        } else{\n",
    "          #treat as the same primer\n",
    "          startpos<-min(startlist)\n",
    "        }\n",
    "      } else{\n",
    "        startpos<-primerPosition(fprimerlist[1], RefSeq, start=TRUE)\n",
    "      }\n",
    "      if(length(rprimerlist) > 1){\n",
    "        startlist<-c()\n",
    "        for(fprimer in fprimerlist){\n",
    "          startpos<-primerPosition(fprimer, RefSeq, start=TRUE)\n",
    "          startlist<-c(startlist, startpos)\n",
    "        }\n",
    "        if(max(startlist)-min(startlist)>10){\n",
    "          #treat as different primers\n",
    "          ###print(\"different primers have been found, you might need to work this part out\")\n",
    "        } else{\n",
    "          #treat as the same primer\n",
    "          startpos<-min(startlist)\n",
    "        }\n",
    "      } else{\n",
    "        startpos<-primerPosition(fprimerlist[1], RefSeq, start=TRUE)\n",
    "      }\n",
    "      figData[lineX,]$seqstart<-startpos\n",
    "    }\n",
    "    \n",
    "    if(!rprimerlist==\"\"){\n",
    "      #trim trailing white spaces\n",
    "      rprimerlist<-split_DNAstringList_unknownSep(rprimerlist)\n",
    "      \n",
    "      if(length(rprimerlist) > 1){\n",
    "        endlist<-c()\n",
    "        for(rprimer in rprimerlist){\n",
    "          endpos<-primerPosition(revComp(rprimer), RefSeq, start=FALSE)\n",
    "          endlist<-c(endlist, endpos)\n",
    "        }\n",
    "        if(max(endlist)-min(endlist)>10){\n",
    "          #treat as different primers\n",
    "          print(\"different primers have been found, you might need to work this part out\")\n",
    "          endpos<-max(endlist)\n",
    "        } else{\n",
    "          #treat as the same primer\n",
    "          endpos<-max(endlist)\n",
    "        }\n",
    "      } else{\n",
    "        endpos<-primerPosition(revComp(rprimerlist[1]), RefSeq, start=FALSE)\n",
    "      }\n",
    "      figData[lineX,]$seqend<-endpos\n",
    "      figData[lineX,]$reads<-reads\n",
    "      figData[lineX,]$dataset<-datasetName\n",
    "      lineX=lineX+1\n",
    "    }\n",
    "\n",
    "  }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we need to get ride of rows with empty values, and collapse the data (now a row per sample) in to one record per dataset (that is, a row per dataset)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get ride of rows with empty values\n",
    "figData[figData==\"\"] <- NA\n",
    "figData<-figData[complete.cases(figData), ]\n",
    "figData<-data.frame(sapply(figData, as.numeric))\n",
    "\n",
    "# aggregate data\n",
    "figAggdata <- aggregate(. ~ seqstart + seqend + dataset, data=figData, FUN=sum)\n",
    "figAggdata$id<-c(1:nrow(figAggdata))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating the figure\n",
    "\n",
    "Now that we have collected all the information that we need, we can start creating the figure with ggplot2. On the x-axis, we will plot the sparting and ending position of the metabarcode, as if they would be hypothethically aligned to the reference sequence. On the y-axis, we want to show the sequencing depth, represented by the number of reads in the dataset (log scale)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set up the x-axis\n",
    "x_ax_name<-expression(paste(\"position on the 16S SSU rRNA (reference: \", italic(\"E. coli\"), \")\"))\n",
    "x_ax_breaks<-c(1,500,1000,1500)\n",
    "x_ax_labs<-paste(x_ax_breaks, 'bp', sep=\" \")\n",
    "\n",
    "#set up the y-axis\n",
    "y_ax_breaks<-c(1:9)\n",
    "y_ax_labs<-10^y_ax_breaks\n",
    "\n",
    "# plot the data\n",
    "ggplot(figAggdata, aes(fill=id)) + \n",
    "  geom_rect(fill = \"royalblue\", alpha = 0.65,\n",
    "    aes(xmin = seqstart, xmax = seqend,\n",
    "                ymin = log10(reads)-0.03, ymax = log10(reads)+0.03)) +\n",
    "  scale_y_continuous(name=\"number of reads (log scale)\",\n",
    "                     breaks=y_ax_breaks,labels=y_ax_labs) +\n",
    "  scale_x_continuous(name=x_ax_name,\n",
    "                     breaks=x_ax_breaks, labels=x_ax_labs) +\n",
    "  ggtitle(\"metabarcode data registered on mARS\") +\n",
    "  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We could also represent the different v-regions on the plot. This makes plotting the data a bit more complicated, but it'll be worth while. The positions of the different v-regions of the 16S were taken from Yang, Bo & Wang, Yong & Qian, Pei-Yuan. (2016). Sensitivity and correlation of hypervariable regions in 16S rRNA genes in phylogenetic analysis. BMC Bioinformatics. 17. 10.1186/s12859-016-0992-y. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in ggplot(figAggdata, aes(fill = id)): could not find function \"ggplot\"\n",
     "output_type": "error",
     "traceback": [
      "Error in ggplot(figAggdata, aes(fill = id)): could not find function \"ggplot\"\nTraceback:\n",
      "1. eval(parse(text = plottext))",
      "2. eval(parse(text = plottext))"
     ]
    }
   ],
   "source": [
    "v_16S_names<-paste(\"v\", as.character(c(1:9)), sep=\"\")\n",
    "v_16S_min<-c(8, 97, 307, 488, 747, 886, 1030, 1181, 1373)\n",
    "v_16S_max<-c(96, 306, 487, 746, 885, 1029, 1180, 1372, 1468)\n",
    "v_16S_col<-rep(c(\"red\", \"blue\"),5)[1:9]\n",
    "\n",
    "v_plot<-\"\"\n",
    "for(v in 1:9){\n",
    "  v_plot <- paste(v_plot,\" geom_rect(fill = \\\"\", v_16S_col[v], \"\\\"\",\n",
    "                        \", aes(xmin = \", v_16S_min[v], \n",
    "                        \", xmax = \", v_16S_max[v],\n",
    "                        \",ymin = log10(1)-0.03, ymax = log10(1)+0.03)) +\", \n",
    "                        sep=\"\")\n",
    "}\n",
    "\n",
    "plottext <- paste(\"ggplot(figAggdata, aes(fill=id)) + \n",
    "            geom_rect(fill = \\\"royalblue\\\", alpha = 0.65,\n",
    "              aes(xmin = seqstart, xmax = seqend,\n",
    "              ymin = log10(reads)-0.03, ymax = log10(reads)+0.03)) +\",\n",
    "            v_plot,\n",
    "            \"scale_y_continuous(name=\\\"number of reads (log scale)\\\",\n",
    "                     breaks=y_ax_breaks,labels=y_ax_labs) +\n",
    "            scale_x_continuous(name=x_ax_name,\n",
    "            breaks=x_ax_breaks, labels=x_ax_labs) +\n",
    "            ggtitle(\\\"metabarcode data registered on mARS\\\") +\n",
    "            theme(plot.title = element_text(hjust = 0.5, face=\\\"bold\\\"))\",\n",
    "            sep=\"\")\n",
    "eval(parse(text=plottext))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.4.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
